Add link support for URLs.
Revise menu.
Add test for loadTableFileAsync.
Create lineartext.com with both embedded homepage and dedicated live editor.
New logo, at least for site.
Update NPM and index.html description and keywords.
Document, add help, update readme, and update changelog. Note assumptions, Firefox support, readme, bug reporting, [tagging] and conventions, and roadmap.

Add type tests:
  Parser sets initial type as note or divider, never draft.
  UI sets initial type as note or divider, never draft.
  Backspace on note type deletes.
  Backspace on divider type converts to note... Or deletes?
  Note is considered draft when isEmpty and type is note.
  Drafts are deleted on focus loss.
  Drafts become plain notes on content add.
  Enter on draft becomes divider.
Shortcut and button tests, integration tests.

Press escape to dismiss overflow menu, double tap empty space to create there, and keyboard shortcuts.
Add lasso group select by clicking an empty space and dragging.

Rename store slice thingy.
Add return types.
Add arrange support for grid and sorting/arrangement/line-up columnar support.
Copy lessons and notes from other projects and references; oidoid; revise button styles to my old UI styles.
Validate HTML.
Middle click to drag workspace.
Polish and test. Also test mobile support.
Review HTML structure with references and semnatics with MDN.

internal / extenral link components
Scrub the repo.
Identify top 3 unpleasant experiences and fix them.
Document outlining (just the first entry of every list + linking)
Add list collapsing (horizontally); this would go in the handlebar.
Review commercial alternative UIs but keep it as simple as possible and line-based. Keyboard navigation is important but so is cursor/UI/non-text editing experience.
Rename note-element to text-element?
Make groups collapsible (persist visual state to local storage).
Add middle click fling / scroll.
Improve the tab focus behavior for lines and groups.
Always indicate focus.
Add group actions for deleting, moving, and collapsing groups.
Prompt to save unsaved work on new file, load file, or page departure.
What to do about async loading and undo?
  https://github.com/omnidan/redux-undo/issues/203
  https://github.com/ForbesLindesay/redux-optimist
Add auto-backup to LocalStorage.
Add long click to drag, click to edit, longer click to change type?
Better mid-group splitting
Review drag-and-drop documentation for performance improvements
  https://github.com/atlassian/react-beautiful-dnd
  https://egghead.io/lessons/react-persist-list-reordering-with-react-beautiful-dnd-using-the-ondragend-callback
Review my other NPM projects.
Review the old prototype and see what's missing.
Forbid add/remove line during load.
Break apart the store slices.
Consider CSS Modules.
Consider structuring by feature more. E.g., feature/counter/* instead of components/counter and reducers/counter.
Rename CSS colors to be like `--color-gray20` and maybe `--card__border-width`.
Probably shouldn't show save for Firefox?
Combine new line with line type selector widget.
  Change thing type when a thing is selected and picker changes.
Add mini-Markdown support: unordered list items, h1, h2, ...?
Implement better cross-platform access keys.
Forbid ESLint warnings, enable caching, and the usual.
Fix button title hover styles.
Review React component library references.
Consider showing navigation labels on wide screens.
Evaluate Service Worker Papa Parse
Figure out how to get the menu out of the way.
Document keyboard navigation.
Split / join with previous line on enter/backspace? This will need to handle the gneerated draft states.
extract keyboard handling
Add multi-card movements.
Improve focus and keyboard behavior. Consider removing the auto-scroll-to-focus.
Can I move LineTextElement logic like keyboard listening to group or app level?

Research
  Review web.dev.
  Review Twitter share cards.
  Review robots.txt.
  Verify browserstest is running.
  Add undo/redo action labeling. In general, it'd be nice to gently alert when the file has been saved or which particular action had been undone/redone.
  Add date TextType support.
  Image thumbnailing support.
  Investigate CSS contain performance boosts.
  File of files using file scheme, file extension, and file content heuristics.
  Multiple open file tabs.
  oid.dev
  Review all the past GitHub repo setups.
  Review all my other repos.

Consider ejecting from Create React App.
  setupTests.ts naming.
  Snapshot colocating.
  Custom loaders (I was going to load translated HTML via a raw loader).

Explore contenteditable
  https://stackoverflow.com/questions/54745557/how-to-keep-cursor-position-in-a-react-input-element
  https://github.com/lovasoa/react-contenteditable/blob/master/src/react-contenteditable.tsx
  https://stackoverflow.com/questions/49639144/why-does-react-warn-against-an-contenteditable-component-having-children-managed
  https://github.com/search?l=TypeScript&q=contentEditable&type=Code
  https://github.com/jaredreich/pell
  https://duckduckgo.com/?q=react+set+innerhtml+not+working&ia=web
  https://stackoverflow.com/questions/37337289/react-js-set-innerhtml-vs-dangerouslysetinnerhtml
  https://duckduckgo.com/?q=contenteditable+convert+text+to+html&ia=web
  https://duckduckgo.com/?q=javascript+convert+text+to+html+contenteditable&ia=web
  https://developer.mozilla.org/en-US/docs/Web/API/document/execCommand
  https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content
  https://stackoverflow.com/questions/7207291/is-it-possible-to-disable-or-control-commands-in-contenteditable-elements
  https://www.quirksmode.org/dom/execCommand/
  https://blog.whatwg.org/the-road-to-html-5-contenteditable

Review ~/docs/notes/linear-text.text.
