import type {FileWithHandle} from 'browser-fs-access'
import type {ID} from '../../id/id'
import type {RootState} from '../store'

import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'
import {IDFactory} from '../../id/id-factory'
import {Line, LineState} from '../../line/line'
import {parseTable} from '../../table-parser/table-parser'
import {Table} from '../../table/table'

export type TableState = Readonly<{
  /** undefined or [0, table.lines.length). */
  focus: Readonly<Line> | undefined
  idFactory: Readonly<IDFactory>
  /**
   * True if unsaved changes are present. False if no changes since saved, just
   * loaded and unchanged, or new and unchanged.
   */
  invalidated: boolean
  status: 'idle' | 'loading' | 'failed'
  table: Readonly<Table>
}>

export const initTableState: TableState = Object.freeze({
  focus: undefined,
  idFactory: Object.freeze(IDFactory()),
  invalidated: false,
  status: 'idle',
  table: Object.freeze(Table())
})

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadTableAsync = createAsyncThunk(
  'table/loadTableAsync',
  async (
    props: Readonly<{
      idFactory: IDFactory
      file: Readonly<FileWithHandle>
    }>
  ): Promise<{idFactory: IDFactory; table: Table}> => {
    // The value we return becomes the `fulfilled` action payload
    const factory = IDFactory(props.idFactory)
    const table = await parseTable(factory, props.file)
    return {idFactory: factory, table}
  }
)

export const tableSlice = createSlice({
  name: 'table',
  initialState: initTableState,
  // The `reducers` field lets us define reducers and generate associated
  // actions.
  reducers: {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    // Use the PayloadAction type to declare the contents of `action.payload`
    addLineAction(state, {payload}: PayloadAction<LineState>) {
      const line = Line(state.idFactory, payload)
      const index =
        state.focus == null
          ? state.table.lines.length
          : Table.findLineIndex(state.table, state.focus.id) + 1
      state.table.lines.splice(index, 0, line)
      state.focus = line
    },
    editLineTextAction(
      state,
      {payload}: PayloadAction<{id: ID; text: string}>
    ) {
      const line = Table.findLine(state.table, payload.id)
      Line.setText(line, payload.text)
      state.invalidated = true
    },
    focusLineAction(state, {payload}: PayloadAction<Line | undefined>) {
      state.focus = payload
    },
    newFileAction(state) {
      state.focus = undefined
      state.invalidated = false
      state.status = 'idle'
      state.table = Table()
      // [todo]: cancel loading.
    },
    removeLineAction(
      state,
      {payload}: PayloadAction<{line: Line; focus: 'prev' | 'next'}>
    ) {
      const index = Table.removeLine(state.table, payload.line.id)
      const nextIndex = Math.max(
        0,
        Math.min(
          index + (payload.focus === 'prev' ? -1 : 0),
          state.table.lines.length - 1
        )
      )
      state.invalidated = true
      state.focus = state.table.lines[nextIndex]
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(loadTableAsync.pending, state => {
        state.status = 'loading'
      })
      .addCase(loadTableAsync.fulfilled, (state, action) => {
        state.table = action.payload.table
        state.idFactory = action.payload.idFactory
        state.focus = undefined
        state.status = 'idle'
      })
      .addCase(loadTableAsync.rejected, state => {
        state.status = 'failed'
        // [todo]: show errors.
      })
  }
})

export const {
  addLineAction,
  editLineTextAction,
  focusLineAction,
  newFileAction,
  removeLineAction
} = tableSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example:
// `useSelector((state: RootState) => state.table.value)`.
export function selectTableState(state: RootState): TableState {
  return state.table
}
