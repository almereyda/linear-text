import type {FileWithHandle} from 'browser-fs-access'
import type {RootState} from '../store'

import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'
import {IDFactory} from '../../id/id-factory'
import {Line} from '../../line/line'
import {parseTable} from '../../table-parser/table-parser'
import {Table} from '../../table/table'

export type TableState = Readonly<{
  /** undefined or [0, table.lines.length). */
  focusedLineIndex: number | undefined
  idFactory: Readonly<IDFactory>
  status: 'idle' | 'loading' | 'failed'
  readonly table: Readonly<Table>
}>

export const initTableState: TableState = Object.freeze({
  focusedLineIndex: undefined,
  idFactory: Object.freeze(IDFactory()),
  status: 'idle',
  table: Object.freeze(Table())
})

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadTableAsync = createAsyncThunk(
  'table/loadTableAsync',
  async (
    props: Readonly<{
      idFactory: IDFactory
      file: Readonly<FileWithHandle>
    }>
  ): Promise<{idFactory: IDFactory; table: Table}> => {
    // The value we return becomes the `fulfilled` action payload
    const factory = IDFactory(props.idFactory)
    const table = await parseTable(factory, props.file)
    return {idFactory: factory, table}
  }
)

export const tableSlice = createSlice({
  name: 'table',
  initialState: initTableState,
  // The `reducers` field lets us define reducers and generate associated
  // actions.
  reducers: {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    // Use the PayloadAction type to declare the contents of `action.payload`
    addLine(state) {
      state.table.lines.push(Line(state.idFactory))
    },
    newFile(state) {
      state.table = Table()
      state.focusedLineIndex = undefined
      state.status = 'idle'
      // [todo]: cancel loading.
    },
    removeLine(state, {payload: index}: PayloadAction<number>) {
      const size = state.table.lines.length
      if (index < 0 || index >= size)
        throw Error(`Invalid line removal at index=${index}; size=${size}.`)
      state.table.lines.splice(index, 1)
      // Assume index is either the focused line or invalidated by it.
      state.focusedLineIndex = undefined
    },
    setFocus(state, {payload: index}: PayloadAction<number | undefined>) {
      const size = state.table.lines.length
      if (index != null && (index < 0 || index >= size))
        throw Error(`Invalid line focus at index=${index}; size=${size}.`)
      state.focusedLineIndex = index
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(loadTableAsync.pending, state => {
        state.status = 'loading'
      })
      .addCase(loadTableAsync.fulfilled, (state, action) => {
        state.table = action.payload.table
        state.idFactory = action.payload.idFactory
        state.focusedLineIndex = undefined
        state.status = 'idle'
      })
      .addCase(loadTableAsync.rejected, state => {
        state.status = 'failed'
        // [todo]: show errors.
      })
  }
})

export const {addLine, newFile, removeLine, setFocus} = tableSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example:
// `useSelector((state: RootState) => state.table.value)`.
export function selectTableState(state: RootState): TableState {
  return state.table
}
