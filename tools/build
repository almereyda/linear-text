#!/usr/bin/env -S deno --quiet run --allow-env --allow-net --allow-read --allow-run --allow-write --ext ts
// Bundles sources into a single HTML file for distribution and development.
//
// --watch  Run development server. Serve on http://localhost:1234 and reload on
//          code change.
import { DOMParser } from 'deno_dom'
import * as esbuild from 'esbuild'
import { denoPlugins } from 'esbuild_deno_loader'
import { encodeBase64 } from 'std/encoding/base64.ts'
import * as path from 'std/path/mod.ts'
import deno from '../deno.json' with { type: 'json' }

const watch = Deno.args.includes('--watch')
const inFilename = 'src/linear-text.html'
const doc = new DOMParser().parseFromString(
  await Deno.readTextFile(inFilename),
  'text/html',
)
if (!doc) throw Error('unable to parse document')
let srcFilename = (
  doc.querySelector('script[type="module"][src]')
)?.getAttribute('src')
if (!srcFilename) throw Error('missing script source')
srcFilename = `${path.dirname(inFilename)}/${srcFilename}`

async function pluginOnEnd(result: esbuild.BuildResult): Promise<void> {
  const copy = <Document> <unknown> doc!.cloneNode(true)
  const manifestEl = copy.querySelector<HTMLLinkElement>('link[rel="manifest"]')
  const manifestURI = manifestEl?.getAttribute('href')
  if (manifestURI) {
    const manifestFilename = `${path.dirname(inFilename)}/${manifestURI}`
    const manifest = JSON.parse(await Deno.readTextFile(manifestFilename))
    for (const icon of manifest.icons) {
      if (!icon.src) throw Error('missing manifest icon src')
      if (!icon.type) throw Error('missing manifest icon type')
      const file = await Deno.readFile(
        `${path.dirname(manifestFilename)}/${icon.src}`,
      )
      icon.src = `data:${icon.type};base64,${encodeBase64(file)}`
    }
    if (watch) manifest.start_url = 'http://localhost:1234' // Suppress warning.
    manifest.version = deno.version
    manifestEl!.setAttribute(
      'href',
      `data:application/json,${encodeURIComponent(JSON.stringify(manifest))}`,
    )
  }
  const icon = copy.querySelector<HTMLLinkElement>('link[rel="icon"]')
  const iconURI = icon?.getAttribute('href')
  if (iconURI) {
    const file = await Deno.readFile(`${path.dirname(inFilename)}/${iconURI}`)
    icon!.setAttribute(
      'href',
      `data:${icon!.getAttribute('type')};base64,${encodeBase64(file)}`,
    )
  }

  let js = result.outputFiles
    ?.filter((file) => file.path.endsWith('.js'))
    .map((file) => file.text)
    .join('') ?? ''
  if (watch) {
    js +=
      "new EventSource('/esbuild').addEventListener('change', () => location.reload());"
  }

  const script = copy.querySelector<HTMLScriptElement>(
    'script[type="module"][src]',
  )
  if (script) {
    script.removeAttribute('src')
    script.textContent = js
  }
  const outFilename = `dist/${
    watch ? 'index.html' : `linear-text-v${deno.version}.html`
  }`
  await Deno.mkdir(path.dirname(outFilename), { recursive: true })
  await Deno.writeTextFile(
    outFilename,
    `<!doctype html>${copy.documentElement.outerHTML}`,
  )
}

// esbuild_deno_loader uses the default file namespace which causes any standard
// loaders like `loader: {'.svg': 'dataurl'}` to fail. Intercept and lock to new
// namespaces. See https://github.com/lucacasonato/esbuild_deno_loader/issues/77.
const svgLoader: esbuild.Plugin = {
  name: 'SVGLoader',
  setup(build) {
    build.onResolve({ filter: /\.svg$/ }, (args) => ({
      path: path.join(args.resolveDir, args.path),
      namespace: svgLoader.name,
    }))

    build.onLoad(
      { filter: /\.svg$/, namespace: svgLoader.name },
      async (args) => ({
        contents: `data:image/svg+xml;utf8,${
          encodeURIComponent(await Deno.readTextFile(args.path))
        }`,
        loader: 'text',
      }),
    )
  },
}
const pngLoader: esbuild.Plugin = {
  name: 'PNGLoader',
  setup(build) {
    build.onResolve({ filter: /\.png$/ }, (args) => ({
      path: path.join(args.resolveDir, args.path),
      namespace: pngLoader.name,
    }))

    build.onLoad(
      { filter: /\.png$/, namespace: pngLoader.name },
      async (args) => ({
        contents: `data:image/png;base64,${
          encodeBase64(await Deno.readFile(args.path))
        }`,
        loader: 'text',
      }),
    )
  },
}

const opts: esbuild.BuildOptions = {
  bundle: true,
  conditions: watch ? ['development'] : [], // Lit
  define: { 'linearTextVersion': `'${deno.version}'` }, // See defines.d.ts.
  entryPoints: [srcFilename],
  format: 'esm',
  logLevel: `info`, // Print the port and build demarcations.
  minify: !watch,
  outdir: 'dist',
  plugins: [
    pngLoader,
    svgLoader,
    ...denoPlugins() as unknown as esbuild.Plugin[],
    { name: 'HTML', setup: (build) => build.onEnd(pluginOnEnd) },
  ],
  sourcemap: 'linked',
  target: 'es2022', // https://esbuild.github.io/content-types/#tsconfig-json
  tsconfigRaw: `{
    "compilerOptions": {
      // https://lit.dev/docs/v3/components/decorators/#decorators-typescript
      "experimentalDecorators": true,
      "useDefineForClassFields": false,

      "target": "ES2022",

      // Don't transform type-only imports.
      "verbatimModuleSyntax": true
    }
  }`,
  write: false, // Written by plugin.
}
if (watch) {
  const ctx = await esbuild.context(opts)
  await Promise.race([ctx.watch(), ctx.serve({ port: 1234, servedir: 'dist' })])
} else {
  await esbuild.build(opts)
  esbuild.stop()
}
